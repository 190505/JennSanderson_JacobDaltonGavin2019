5/3/19 - For the two days in this week, our group got started on developing the Discord Bot. Our first large issue has come in the form of a major decision in the format of our program. In order to have the bot run constantly, it needs to be hosted seprate from the app. If the bot were initalized in the app, problems would occur as multiple instances of the bot would probably break the program. In light of this, Dalton will be setting up a Microsoft Azure server with the core bot program running on it, Jacob will be in charge of setting up layout and logic within the Android app, and I(Gavin) will start with coding the core bot. The Android app will be used to interface the bot hosted with azure. This will assure that multiple instances of the app can all still send commands to the server, but there is only one instance of the core bot. This is the layout for functionality developed within the first two days. Hope you're happy.

5/10/19 - A great deal of progress was made this week. Just as last week, roles have been created for seprate tasks in order to develop our Android project. I(Gavin) am devleoping the core bot with IntelliJ IDEA, Jacob has been developing the layout to match the proto.io design perfectly, and Dalton has been working on setting up a server for the bot. For the core bot, Major files: Main.java, MusicManager.java, AudioPlayerSendHandler.java, and TrackScheduler.java have been created. Their functionality is to first initialize the bot through the Discord API with a client token using JDA, a library for this API access. Next, the bot listens for events(messages) within the chat of the designated Guild(Discord group). When an event contains a certain command flag, the bot can use the LavaPlayer library to pull a song from a music source and play it through the bot. Jacob has been developing layout files: bot_status_activity.xml and startup_activity_main.xml that perfectly match the proto.io mockup. Dalton has been learning how to run serverless, node.js, and setting up AWS.

5/17/19 - The majority of the development process for the Discord Bot is focused on the core bot program, because if there was no code for the bot, it would serve no purpose. This week has been focused on the music player functionality of the bot, as that was one of the main goals for our group. The bot should allow a user to queue a song and the bot will play it for everyone within the voice channel. I(Gavin) had to do quite a bit of research on this, because the documentation is very limited. Those hours are reflected in OVERTIME.md. Using the LavaPlayer library which handles pulling audio data from sources such as youtube, soundcloud, local files, etc; I created the following files: MusicManager.java, TrackScheduler.java, and AudioPlayerSendHandler.java. Although I had everything I needed to make the bot play music, the audio wasn't being streamed. Throughout the week, I tried a multitude of fixes thinking my setup was wrong. On Thursday, I solved the issue by wrapping the array of audio bytes into a ByteBuffer and passing it to the bot. Now that the bot is capable of playing music, I plan to incorporate more commands, and start researching how to get the Android app to interface with the the server. My team has a lot of work, and I'm not sure if we will finish in time for grading.
